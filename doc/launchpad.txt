*launchpad.txt*	Effortless project launching.
*launchpad*

CONTENTS						*launchpad-contents*

Introduction					|launchpad-introduction|
Configuration					|launchpad-configure|
Api						|launchpad-api|
Commands					|launchpad-commands|

==============================================================================
INTRODUCTION						*launchpad-introduction*

This plugin provides automatic zero-configuration "Build and Run"
functionality in a language-agnostic way.
Vim by default ships with usable build support as per |:compiler| and
|'makeprg'|. The goal is to not stray too far from this original idiomatic vim
compiler support and leverage for example the builtin |quickfix| error jumping
with |:cexpr|, and then extend it in the following principles:
- Make the build step asynchronous
- Allow to launch the built program
- Require zero configuration for the common case
- Provide a reasonable interface (e.g. show program output)
- Add debugging integration with |vimspector|

------------------------------------------------------------------------------
CONFIGURATION						*launchpad-configure*

	g:launchpad_options				*g:launchpad_options*
All user-facing options are configured with the |g:launchpad_options| variable,
which is a |Dictionary| containing all options as key-value pairs. The default
options can be retrieved with |launchpad#default_options()|.
The following keys are available:

	"autojump"					*launchpad_options_autojump*
		If truthy, automatically jump to the first error with |cexpr|
		when a build fails. Otherwise |cgetexpr| will be used.

	"autoopenquickfix"				*launchpad_options_autoopenquickfix*
		Determines how the |quickfix| list will be opened when there
		are errors.
			`"noop"`	Do not open the window.
			`"open"`	Automatically open the window.
			`"focus"`	Open and focus the window.

	"autosave"					*launchpad_options_autosave*
		If truthy, automatically save all |modified| files before
		building.

	"closepreview"					*launchpad_options_closepreview*
		The value of this option determines when the preview window
		will automatically close.
			`"always"`	Always close the preview.
			`"never"`	Never close the preview.
			`"auto"`	Use some heuristics to provide a good
					balance between the above two.

		The heuristics for the `"auto"` value are an implementation
		detail, but in general follow the UX of popular IDEs.

	"default_mappings"				*launchpad_options_default_mappings*
		If truthy, use the default keybindings. When you disable this,
		refer to |launchpad-api| for how to setup your own
		keybindings.

	"filetype_mappings"				*launchpad_options_filetype_mappings*
		A |Dictionary| mapping |filetype| keys to an array value, that
		dictates the possible build systems to use for the given
		|filetype|. The build systems will be tried in the order that
		they appear in the array. If a |filetype| does not appear as a
		key, then all possible build systems will be attempted in
		lexicographic order.
		Regardless of which items appear in the array, the project
		launchpad configuration is always attempted first.

------------------------------------------------------------------------------
API							*launchpad-api*

	launchpad#build()				*launchpad#build()*
		Build the project.

	launchpad#launch()				*launchpad#launch()*
		Launch the project.

	launchpad#run()					*launchpad#run()*
		Build and launch the project.

------------------------------------------------------------------------------
COMMANDS						*launchpad-commands*

	LaunchpadBoilerplate				*:LaunchpadBoilerplate*
		Generates a `.launchpad.json` file outline, which can be used
		for custom target definitions.

	LaunchpadVimspectorGen				*:LaunchpadVimspectorGen*
		Generates a `.vimspector.json` file from the existing target
		configuration for debugging integration with |vimspector|.

	LaunchpadFocus					*:LaunchpadFocus*
		If the current project contains multiple launchable targets,
		this can be used to focus a specific target for use with
		|launchpad#run()|.
		In case that the specified argument is not a valid target, it
		will be run in a shell instead, which is useful for running
		temporary scripts.

	LaunchpadOnce					*:LaunchpadOnce*
		Similar to |:LaunchpadFocus|, but only use the specified
		target for the next run, then revert back to the previous
		target.

==============================================================================
	vim:tw=78:sw=4:ts=8:ft=help:norl:noet:
